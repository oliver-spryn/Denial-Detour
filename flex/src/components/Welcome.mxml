<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   borderColor="0xD8DDE1" cornerRadius="10"
				   creationComplete="init(event)" xmlns:components="components.*">
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
	</s:layout>
	
	<s:states>
		<s:State name="Start"/>
		<s:State name="IPInvalid"/>
		<s:State name="Bandwidth"/>
		<s:State name="Login"/>
	</s:states>
	
	<s:backgroundFill>
		<s:LinearGradient rotation="90">
			<s:entries>
				<s:GradientEntry color="0xFAFAFA" />
				<s:GradientEntry color="0xF5F5F5" />
			</s:entries>
		</s:LinearGradient>
	</s:backgroundFill>
	
	<fx:Script>
		<![CDATA[
			import com.forwardfour.Config;
			
			import jtd.crypto.Hash;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var config:Config = new Config();
			
		/**
		 * Send the pre-login verification request to the server
		 */
			private function init(event:FlexEvent):void {
				serverInitResponder.token = serverInit.send();
			}
			
		/**
		 * Generate the first day of the following month. The date will be used 
		 * to inidicate when the server's bandwidth will be reset, which occurs
		 * at midnight on the first day of each month.
		 */
			private function generateMonth(event:FlexEvent):void {
			//Generate the name of the next month
				var months:Array = new Array("January", "February", "March", "April", "May", "June",
					"July", "August", "September", "October", "November", "December");
				var date:Date = new Date();
				var month:int = date.getMonth();
				
			//We don't have a 13th month, so wrap back around to Janurary when finding the next month
				if (month == 12) {
					month = 1;
			//Add one to calculate the next month
				} else {
					month++;
				}
				
			//Modify the label which will display this date
				dynamicDate.text = "This limit will be reset on " + months[month] + " 1st, " + date.getFullYear() + " at midnight.";
			}
			
		/**
		 * Wait for a response from the initialization script and handle any one
		 * of these three possible outcomes:
		 *  - invalid IP address
		 *  - server bandwidth is at or near quota
		 *  - the IP address is valid and server bandwidth is adequate
		 */
			private function initSuccess(event:ResultEvent):void {
				var status:String = event.result.status.toString();
				
				switch(status) {
				//Handle invalid IP addresses
					case "IP" : 
						this.currentState = "IPInvalid";
						break;
					
				//Handle server bandwidth quota
					case "bandwidth" : 
						this.currentState = "Bandwidth";
						break;
					
				//All tests passed successfully
					default : 
						this.currentState = "Login";
						break;
				}
			}
			
		/**
		 * Indicate that an error has taken place when communicating with the server
		 */
			private function initFail(event:FaultEvent):void {
				Alert.show("A connection to the host could not be established. Either the server is not responding or you are having networking problems.\n\nError type: " + event.fault.faultString + "\nError code: " + event.fault.faultCode, "Connection Failed");
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="loggedIn", type="flash.events.Event")]
		[Event(name="keyLoggedIn", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:HTTPService showBusyCursor="true" id="serverInit" url="{this.config.initScript}"/>
		<s:CallResponder id="serverInitResponder" result="initSuccess(event)" fault="initFail(event)"/>
	</fx:Declarations>
	
<!-- Title and header line -->
	<s:Label text.Start="Welcome" text.IPInvalid="Access Denied" text.Bandwidth="Download Limit Exceeded" text.Login="Login"
			 textAlign.Start="center" fontWeight="bold" fontSize="18" minWidth="200" />
	
	<s:Line width="100%" excludeFrom="Start">
		<s:stroke>
			<s:SolidColorStroke color="0xD8DDE1" weight="1"/>
		</s:stroke>
	</s:Line>
	
	<mx:Spacer height="5" />
	
<!-- Welcome loader -->
	<s:Group includeIn="Start" id="drag" width="100%">
		<mx:SWFLoader id="loader" horizontalCenter="0" source="@Embed('assets/icon.swf')" />
	</s:Group>
	
<!-- IP is invalid message -->
	<s:Group includeIn="IPInvalid">
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		
		<s:Label text="Your IP address is not permitted to use this application. Are you at Grove City College?"/>
		<s:Label text="You can, however, access it if you have an off-campus access code."/>
		<s:Label text="If you have one enter it below:"/>
		<mx:Spacer height="15" />
		
		<components:Key id="keyForm" keyLoggedIn="{dispatchEvent(new Event('keyLoggedIn'))}" />
	</s:Group>
	
<!-- Server bandwidth has reached its quota -->
	<s:Group includeIn="Bandwidth">
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		
		<s:Label text="Sorry! The download limit for this host for this month has been exceeded."/>
		<s:Label id="dynamicDate" creationComplete="generateMonth(event)"/>
	</s:Group>
	
<!-- Login page -->
	<s:Group includeIn="Login">
		<components:Login id="loginForm" loggedIn="{dispatchEvent(new Event('loggedIn'))}"/>
	</s:Group>
</s:BorderContainer>
